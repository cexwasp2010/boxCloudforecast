{"ast":null,"code":"'use strict';\n/**\n * Methods for traversing the DOM structure.\n *\n * @module cheerio/traversing\n */\n\nvar select = require('cheerio-select');\n\nvar utils = require('../utils');\n\nvar domEach = utils.domEach;\n\nvar uniqueSort = require('htmlparser2').DomUtils.uniqueSort;\n\nvar isTag = utils.isTag;\nvar slice = Array.prototype.slice;\nvar reSiblingSelector = /^\\s*[~+]/;\n/**\n * Get the descendants of each element in the current set of matched elements,\n * filtered by a selector, jQuery object, or element.\n *\n * @example\n *   $('#fruits').find('li').length;\n *   //=> 3\n *   $('#fruits').find($('.apple')).length;\n *   //=> 1\n *\n * @param {string | Cheerio | Node} selectorOrHaystack - Element to look for.\n * @returns {Cheerio} The found elements.\n * @see {@link https://api.jquery.com/find/}\n */\n\nexports.find = function (selectorOrHaystack) {\n  if (!selectorOrHaystack) {\n    return this._make([]);\n  }\n\n  var context = this.toArray();\n\n  if (typeof selectorOrHaystack !== 'string') {\n    var contains = this.constructor.contains;\n    var haystack = selectorOrHaystack.cheerio ? selectorOrHaystack.get() : [selectorOrHaystack];\n    return this._make(haystack.filter(function (elem) {\n      return context.some(function (node) {\n        return contains(node, elem);\n      });\n    }));\n  }\n\n  var elems = reSiblingSelector.test(selectorOrHaystack) ? context : context.reduce(function (newElems, elem) {\n    return Array.isArray(elem.children) ? newElems.concat(elem.children.filter(isTag)) : newElems;\n  }, []);\n  var options = Object.assign({\n    context: context\n  }, this.options);\n  return this._make(select.select(selectorOrHaystack, elems, options));\n};\n/**\n * Get the parent of each element in the current set of matched elements,\n * optionally filtered by a selector.\n *\n * @example\n *   $('.pear').parent().attr('id');\n *   //=> fruits\n *\n * @param {string} [selector] - If specified filter for parent.\n * @returns {Cheerio} The parents.\n * @see {@link https://api.jquery.com/parent/}\n */\n\n\nexports.parent = function (selector) {\n  var set = [];\n  domEach(this, function (_, elem) {\n    var parentElem = elem.parent;\n\n    if (parentElem && parentElem.type !== 'root' && set.indexOf(parentElem) < 0) {\n      set.push(parentElem);\n    }\n  });\n\n  if (selector) {\n    set = exports.filter.call(set, selector, this);\n  }\n\n  return this._make(set);\n};\n/**\n * Get a set of parents filtered by `selector` of each element in the current\n * set of match elements.\n *\n * @example\n *   $('.orange').parents().length;\n *   // => 2\n *   $('.orange').parents('#fruits').length;\n *   // => 1\n *\n * @param {string} [selector] - If specified filter for parents.\n * @returns {Cheerio} The parents.\n * @see {@link https://api.jquery.com/parents/}\n */\n\n\nexports.parents = function (selector) {\n  var parentNodes = []; // When multiple DOM elements are in the original set, the resulting set will\n  // be in *reverse* order of the original elements as well, with duplicates\n  // removed.\n\n  this.get().reverse().forEach(function (elem) {\n    traverseParents(this, elem.parent, selector, Infinity).forEach(function (node) {\n      if (parentNodes.indexOf(node) === -1) {\n        parentNodes.push(node);\n      }\n    });\n  }, this);\n  return this._make(parentNodes);\n};\n/**\n * Get the ancestors of each element in the current set of matched elements, up\n * to but not including the element matched by the selector, DOM node, or cheerio object.\n *\n * @example\n *   $('.orange').parentsUntil('#food').length;\n *   // => 1\n *\n * @param {string | Node | Cheerio} selector - Selector for element to stop at.\n * @param {string | Function} [filter] - Optional filter for parents.\n * @returns {Cheerio} The parents.\n * @see {@link https://api.jquery.com/parentsUntil/}\n */\n\n\nexports.parentsUntil = function (selector, filter) {\n  var parentNodes = [];\n  var untilNode;\n  var untilNodes;\n\n  if (typeof selector === 'string') {\n    untilNodes = this.parents(selector).toArray();\n  } else if (selector && selector.cheerio) {\n    untilNodes = selector.toArray();\n  } else if (selector) {\n    untilNode = selector;\n  } // When multiple DOM elements are in the original set, the resulting set will\n  // be in *reverse* order of the original elements as well, with duplicates\n  // removed.\n\n\n  this.toArray().reverse().forEach(function (elem) {\n    while (elem = elem.parent) {\n      if (untilNode && elem !== untilNode || untilNodes && untilNodes.indexOf(elem) === -1 || !untilNode && !untilNodes) {\n        if (isTag(elem) && parentNodes.indexOf(elem) === -1) {\n          parentNodes.push(elem);\n        }\n      } else {\n        break;\n      }\n    }\n  }, this);\n  return filter ? exports.filter.call(parentNodes, filter, this) : this._make(parentNodes);\n};\n/**\n * For each element in the set, get the first element that matches the selector\n * by testing the element itself and traversing up through its ancestors in the DOM tree.\n *\n * @example\n *   $('.orange').closest();\n *   // => []\n *   $('.orange').closest('.apple');\n *   // => []\n *   $('.orange').closest('li');\n *   // => [<li class=\"orange\">Orange</li>]\n *   $('.orange').closest('#fruits');\n *   // => [<ul id=\"fruits\"> ... </ul>]\n *\n * @param {string} [selector] - Selector for the element to find.\n * @returns {Cheerio} The closest nodes.\n * @see {@link https://api.jquery.com/closest/}\n */\n\n\nexports.closest = function (selector) {\n  var set = [];\n\n  if (!selector) {\n    return this._make(set);\n  }\n\n  domEach(this, function (_, elem) {\n    var closestElem = traverseParents(this, elem, selector, 1)[0]; // Do not add duplicate elements to the set\n\n    if (closestElem && set.indexOf(closestElem) < 0) {\n      set.push(closestElem);\n    }\n  });\n  return this._make(set);\n};\n/**\n * Gets the next sibling of the first selected element, optionally filtered by a selector.\n *\n * @example\n *   $('.apple').next().hasClass('orange');\n *   //=> true\n *\n * @param {string} [selector] - If specified filter for sibling.\n * @returns {Cheerio} The next nodes.\n * @see {@link https://api.jquery.com/next/}\n */\n\n\nexports.next = function (selector) {\n  if (!this[0]) {\n    return this;\n  }\n\n  var elems = [];\n  domEach(this, function (_, elem) {\n    while (elem = elem.next) {\n      if (isTag(elem)) {\n        elems.push(elem);\n        return;\n      }\n    }\n  });\n  return selector ? exports.filter.call(elems, selector, this) : this._make(elems);\n};\n/**\n * Gets all the following siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @example\n *   $('.apple').nextAll();\n *   //=> [<li class=\"orange\">Orange</li>, <li class=\"pear\">Pear</li>]\n *   $('.apple').nextAll('.orange');\n *   //=> [<li class=\"orange\">Orange</li>]\n *\n * @param {string} [selector] - If specified filter for siblings.\n * @returns {Cheerio} The next nodes.\n * @see {@link https://api.jquery.com/nextAll/}\n */\n\n\nexports.nextAll = function (selector) {\n  if (!this[0]) {\n    return this;\n  }\n\n  var elems = [];\n  domEach(this, function (_, elem) {\n    while (elem = elem.next) {\n      if (isTag(elem) && elems.indexOf(elem) === -1) {\n        elems.push(elem);\n      }\n    }\n  });\n  return selector ? exports.filter.call(elems, selector, this) : this._make(elems);\n};\n/**\n * Gets all the following siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @example\n *   $('.apple').nextUntil('.pear');\n *   //=> [<li class=\"orange\">Orange</li>]\n *\n * @param {string | Cheerio | Node} selector - Selector for element to stop at.\n * @param {string} [filterSelector] - If specified filter for siblings.\n * @returns {Cheerio} The next nodes.\n * @see {@link https://api.jquery.com/nextUntil/}\n */\n\n\nexports.nextUntil = function (selector, filterSelector) {\n  if (!this[0]) {\n    return this;\n  }\n\n  var elems = [];\n  var untilNode;\n  var untilNodes;\n\n  if (typeof selector === 'string') {\n    untilNodes = this.nextAll(selector).toArray();\n  } else if (selector && selector.cheerio) {\n    untilNodes = selector.get();\n  } else if (selector) {\n    untilNode = selector;\n  }\n\n  domEach(this, function (_, elem) {\n    while (elem = elem.next) {\n      if (untilNode && elem !== untilNode || untilNodes && untilNodes.indexOf(elem) === -1 || !untilNode && !untilNodes) {\n        if (isTag(elem) && elems.indexOf(elem) === -1) {\n          elems.push(elem);\n        }\n      } else {\n        break;\n      }\n    }\n  });\n  return filterSelector ? exports.filter.call(elems, filterSelector, this) : this._make(elems);\n};\n/**\n * Gets the previous sibling of the first selected element optionally filtered\n * by a selector.\n *\n * @example\n *   $('.orange').prev().hasClass('apple');\n *   //=> true\n *\n * @param {string} [selector] - If specified filter for siblings.\n * @returns {Cheerio} The previous nodes.\n * @see {@link https://api.jquery.com/prev/}\n */\n\n\nexports.prev = function (selector) {\n  if (!this[0]) {\n    return this;\n  }\n\n  var elems = [];\n  domEach(this, function (_, elem) {\n    while (elem = elem.prev) {\n      if (isTag(elem)) {\n        elems.push(elem);\n        return;\n      }\n    }\n  });\n  return selector ? exports.filter.call(elems, selector, this) : this._make(elems);\n};\n/**\n * Gets all the preceding siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @example\n *   $('.pear').prevAll();\n *   //=> [<li class=\"orange\">Orange</li>, <li class=\"apple\">Apple</li>]\n *   $('.pear').prevAll('.orange');\n *   //=> [<li class=\"orange\">Orange</li>]\n *\n * @param {string} [selector] - If specified filter for siblings.\n * @returns {Cheerio} The previous nodes.\n * @see {@link https://api.jquery.com/prevAll/}\n */\n\n\nexports.prevAll = function (selector) {\n  if (!this[0]) {\n    return this;\n  }\n\n  var elems = [];\n  domEach(this, function (_, elem) {\n    while (elem = elem.prev) {\n      if (isTag(elem) && elems.indexOf(elem) === -1) {\n        elems.push(elem);\n      }\n    }\n  });\n  return selector ? exports.filter.call(elems, selector, this) : this._make(elems);\n};\n/**\n * Gets all the preceding siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @example\n *   $('.pear').prevUntil('.apple');\n *   //=> [<li class=\"orange\">Orange</li>]\n *\n * @param {string | Cheerio | Node} selector - Selector for element to stop at.\n * @param {string} [filterSelector] - If specified filter for siblings.\n * @returns {Cheerio} The previous nodes.\n * @see {@link https://api.jquery.com/prevUntil/}\n */\n\n\nexports.prevUntil = function (selector, filterSelector) {\n  if (!this[0]) {\n    return this;\n  }\n\n  var elems = [];\n  var untilNode;\n  var untilNodes;\n\n  if (typeof selector === 'string') {\n    untilNodes = this.prevAll(selector).toArray();\n  } else if (selector && selector.cheerio) {\n    untilNodes = selector.get();\n  } else if (selector) {\n    untilNode = selector;\n  }\n\n  domEach(this, function (_, elem) {\n    while (elem = elem.prev) {\n      if (untilNode && elem !== untilNode || untilNodes && untilNodes.indexOf(elem) === -1 || !untilNode && !untilNodes) {\n        if (isTag(elem) && elems.indexOf(elem) === -1) {\n          elems.push(elem);\n        }\n      } else {\n        break;\n      }\n    }\n  });\n  return filterSelector ? exports.filter.call(elems, filterSelector, this) : this._make(elems);\n};\n/**\n * Gets the first selected element's siblings, excluding itself.\n *\n * @example\n *   $('.pear').siblings().length;\n *   //=> 2\n *\n *   $('.pear').siblings('.orange').length;\n *   //=> 1\n *\n * @param {string} [selector] - If specified filter for siblings.\n * @returns {Cheerio} The siblings.\n * @see {@link https://api.jquery.com/siblings/}\n */\n\n\nexports.siblings = function (selector) {\n  var parent = this.parent();\n  var elems = (parent ? parent.children() : this.siblingsAndMe()).toArray().filter(function (elem) {\n    return isTag(elem) && !this.is(elem);\n  }, this);\n\n  if (selector !== undefined) {\n    return exports.filter.call(elems, selector, this);\n  }\n\n  return this._make(elems);\n};\n/**\n * Gets the children of the first selected element.\n *\n * @example\n *   $('#fruits').children().length;\n *   //=> 3\n *\n *   $('#fruits').children('.pear').text();\n *   //=> Pear\n *\n * @param {string} [selector] - If specified filter for children.\n * @returns {Cheerio} The children.\n * @see {@link https://api.jquery.com/children/}\n */\n\n\nexports.children = function (selector) {\n  var elems = this.toArray().reduce(function (newElems, elem) {\n    return newElems.concat(elem.children.filter(isTag));\n  }, []);\n  if (selector === undefined) return this._make(elems);\n  return exports.filter.call(elems, selector, this);\n};\n/**\n * Gets the children of each element in the set of matched elements, including\n * text and comment nodes.\n *\n * @example\n *   $('#fruits').contents().length;\n *   //=> 3\n *\n * @returns {Cheerio} The children.\n * @see {@link https://api.jquery.com/contents/}\n */\n\n\nexports.contents = function () {\n  var elems = this.toArray().reduce(function (newElems, elem) {\n    return newElems.concat(elem.children);\n  }, []);\n  return this._make(elems);\n};\n/**\n * Iterates over a cheerio object, executing a function for each matched\n * element. When the callback is fired, the function is fired in the context of\n * the DOM element, so `this` refers to the current element, which is equivalent\n * to the function parameter `element`. To break out of the `each` loop early,\n * return with `false`.\n *\n * @example\n *   const fruits = [];\n *\n *   $('li').each(function (i, elem) {\n *     fruits[i] = $(this).text();\n *   });\n *\n *   fruits.join(', ');\n *   //=> Apple, Orange, Pear\n *\n * @param {Function} fn - Function to execute.\n * @returns {Cheerio} The instance itself, useful for chaining.\n * @see {@link https://api.jquery.com/each/}\n */\n\n\nexports.each = function (fn) {\n  var i = 0;\n  var len = this.length;\n\n  while (i < len && fn.call(this[i], i, this[i]) !== false) {\n    ++i;\n  }\n\n  return this;\n};\n/**\n * Pass each element in the current matched set through a function, producing a\n * new Cheerio object containing the return values. The function can return an\n * individual data item or an array of data items to be inserted into the\n * resulting set. If an array is returned, the elements inside the array are\n * inserted into the set. If the function returns null or undefined, no element\n * will be inserted.\n *\n * @example\n *   $('li')\n *     .map(function (i, el) {\n *       // this === el\n *       return $(this).text();\n *     })\n *     .get()\n *     .join(' ');\n *   //=> \"apple orange pear\"\n *\n * @param {Function} fn - Function to execute.\n * @returns {Cheerio} The mapped elements, wrapped in a Cheerio collection.\n * @see {@link https://api.jquery.com/map/}\n */\n\n\nexports.map = function (fn) {\n  var elems = [];\n\n  for (var i = 0; i < this.length; i++) {\n    var el = this[i];\n    var val = fn.call(el, i, el);\n\n    if (val != null) {\n      elems = elems.concat(val);\n    }\n  }\n\n  return this._make(elems);\n};\n\nfunction getFilterFn(match) {\n  if (typeof match === 'function') {\n    return function (el, i) {\n      return match.call(el, i, el);\n    };\n  }\n\n  if (match.cheerio) {\n    return match.is.bind(match);\n  }\n\n  return function (el) {\n    return match === el;\n  };\n}\n/**\n * Iterates over a cheerio object, reducing the set of selector elements to\n * those that match the selector or pass the function's test. When a Cheerio\n * selection is specified, return only the elements contained in that selection.\n * When an element is specified, return only that element (if it is contained in\n * the original selection). If using the function method, the function is\n * executed in the context of the selected element, so `this` refers to the\n * current element.\n *\n * @example <caption>Selector</caption>\n *   $('li').filter('.orange').attr('class');\n *   //=> orange\n *\n * @example <caption>Function</caption>\n *   $('li')\n *     .filter(function (i, el) {\n *       // this === el\n *       return $(this).attr('class') === 'orange';\n *     })\n *     .attr('class');\n *   //=> orange\n *\n * @function\n * @param {string | Function} match - Value to look for, following the rules above.\n * @param {Cheerio} [container] - Optional node to filter instead.\n * @returns {Cheerio} The filtered collection.\n * @see {@link https://api.jquery.com/filter/}\n */\n\n\nexports.filter = function (match, container) {\n  container = container || this;\n  var elements = this.toArray ? this.toArray() : this;\n  elements = typeof match === 'string' ? select.filter(match, elements, container.options) : elements.filter(getFilterFn(match));\n  return container._make(elements);\n};\n/**\n * Remove elements from the set of matched elements. Given a jQuery object that\n * represents a set of DOM elements, the `.not()` method constructs a new jQuery\n * object from a subset of the matching elements. The supplied selector is\n * tested against each element; the elements that don't match the selector will\n * be included in the result. The `.not()` method can take a function as its\n * argument in the same way that `.filter()` does. Elements for which the\n * function returns true are excluded from the filtered set; all other elements\n * are included.\n *\n * @example <caption>Selector</caption>\n *   $('li').not('.apple').length;\n *   //=> 2\n *\n * @example <caption>Function</caption>\n *   $('li').not(function (i, el) {\n *     // this === el\n *     return $(this).attr('class') === 'orange';\n *   }).length;\n *   //=> 2\n *\n * @function\n * @param {string | Function} match - Value to look for, following the rules above.\n * @param {Node[] | Cheerio} [container] - Optional node to filter instead.\n * @returns {Cheerio} The filtered collection.\n * @see {@link https://api.jquery.com/not/}\n */\n\n\nexports.not = function (match, container) {\n  container = container || this;\n  var elements = container.toArray ? container.toArray() : container;\n\n  if (typeof match === 'string') {\n    var matches = new Set(select.filter(match, elements, this.options));\n    elements = elements.filter(function (el) {\n      return !matches.has(el);\n    });\n  } else {\n    var filterFn = getFilterFn(match);\n    elements = elements.filter(function (el, i) {\n      return !filterFn(el, i);\n    });\n  }\n\n  return container._make(elements);\n};\n/**\n * Filters the set of matched elements to only those which have the given DOM\n * element as a descendant or which have a descendant that matches the given\n * selector. Equivalent to `.filter(':has(selector)')`.\n *\n * @example <caption>Selector</caption>\n *   $('ul').has('.pear').attr('id');\n *   //=> fruits\n *\n * @example <caption>Element</caption>\n *   $('ul').has($('.pear')[0]).attr('id');\n *   //=> fruits\n *\n * @param {string | Cheerio | Node} selectorOrHaystack - Element to look for.\n * @returns {Cheerio} The filtered collection.\n * @see {@link https://api.jquery.com/has/}\n */\n\n\nexports.has = function (selectorOrHaystack) {\n  var that = this;\n  return exports.filter.call(this, function (_, el) {\n    return that._make(el).find(selectorOrHaystack).length > 0;\n  });\n};\n/**\n * Will select the first element of a cheerio object.\n *\n * @example\n *   $('#fruits').children().first().text();\n *   //=> Apple\n *\n * @returns {Cheerio} The first element.\n * @see {@link https://api.jquery.com/first/}\n */\n\n\nexports.first = function () {\n  return this.length > 1 ? this._make(this[0]) : this;\n};\n/**\n * Will select the last element of a cheerio object.\n *\n * @example\n *   $('#fruits').children().last().text();\n *   //=> Pear\n *\n * @returns {Cheerio} The last element.\n * @see {@link https://api.jquery.com/last/}\n */\n\n\nexports.last = function () {\n  return this.length > 1 ? this._make(this[this.length - 1]) : this;\n};\n/**\n * Reduce the set of matched elements to the one at the specified index. Use\n * `.eq(-i)` to count backwards from the last selected element.\n *\n * @example\n *   $('li').eq(0).text();\n *   //=> Apple\n *\n *   $('li').eq(-1).text();\n *   //=> Pear\n *\n * @param {number} i - Index of the element to select.\n * @returns {Cheerio} The element at the `i`th position.\n * @see {@link https://api.jquery.com/eq/}\n */\n\n\nexports.eq = function (i) {\n  i = +i; // Use the first identity optimization if possible\n\n  if (i === 0 && this.length <= 1) return this;\n  if (i < 0) i = this.length + i;\n  return this[i] ? this._make(this[i]) : this._make([]);\n};\n/**\n * Retrieve the DOM elements matched by the Cheerio object. If an index is\n * specified, retrieve one of the elements matched by the Cheerio object.\n *\n * @example\n *   $('li').get(0).tagName\n *   //=> li\n *\n *   If no index is specified, retrieve all elements matched by the Cheerio object:\n *\n * @example\n *   $('li').get().length;\n *   //=> 3\n *\n * @param {number} [i] - Element to retrieve.\n * @returns {Node} The node at the `i`th position.\n * @see {@link https://api.jquery.com/get/}\n */\n\n\nexports.get = function (i) {\n  if (i == null) {\n    return slice.call(this);\n  }\n\n  return this[i < 0 ? this.length + i : i];\n};\n/**\n * Search for a given element from among the matched elements.\n *\n * @example\n *   $('.pear').index();\n *   //=> 2\n *   $('.orange').index('li');\n *   //=> 1\n *   $('.apple').index($('#fruit, li'));\n *   //=> 1\n *\n * @param {string | Cheerio | Node} [selectorOrNeedle] - Element to look for.\n * @returns {number} The index of the element.\n * @see {@link https://api.jquery.com/index/}\n */\n\n\nexports.index = function (selectorOrNeedle) {\n  var $haystack;\n  var needle;\n\n  if (arguments.length === 0) {\n    $haystack = this.parent().children();\n    needle = this[0];\n  } else if (typeof selectorOrNeedle === 'string') {\n    $haystack = this._make(selectorOrNeedle);\n    needle = this[0];\n  } else {\n    $haystack = this;\n    needle = selectorOrNeedle.cheerio ? selectorOrNeedle[0] : selectorOrNeedle;\n  }\n\n  return $haystack.get().indexOf(needle);\n};\n/**\n * Gets the elements matching the specified range (0-based position).\n *\n * @example\n *   $('li').slice(1).eq(0).text();\n *   //=> 'Orange'\n *\n *   $('li').slice(1, 2).length;\n *   //=> 1\n *\n * @param {number} [start] - An position at which the elements begin to be\n *   selected. If negative, it indicates an offset from the end of the set.\n * @param {number} [end] - An position at which the elements stop being\n *   selected. If negative, it indicates an offset from the end of the set. If\n *   omitted, the range continues until the end of the set.\n * @returns {Cheerio} The elements matching the specified range.\n * @see {@link https://api.jquery.com/slice/}\n */\n\n\nexports.slice = function (start, end) {\n  return this._make(slice.call(this, start, end));\n};\n\nfunction traverseParents(self, elem, selector, limit) {\n  var elems = [];\n\n  while (elem && elems.length < limit && elem.type !== 'root') {\n    if (!selector || exports.filter.call([elem], selector, self).length) {\n      elems.push(elem);\n    }\n\n    elem = elem.parent;\n  }\n\n  return elems;\n}\n/**\n * End the most recent filtering operation in the current chain and return the\n * set of matched elements to its previous state.\n *\n * @example\n *   $('li').eq(0).end().length;\n *   //=> 3\n *\n * @returns {Cheerio} The previous state of the set of matched elements.\n * @see {@link https://api.jquery.com/end/}\n */\n\n\nexports.end = function () {\n  return this.prevObject || this._make([]);\n};\n/**\n * Add elements to the set of matched elements.\n *\n * @example\n *   $('.apple').add('.orange').length;\n *   //=> 2\n *\n * @param {string | Cheerio} other - Elements to add.\n * @param {Cheerio} [context] - Optionally the context of the new selection.\n * @returns {Cheerio} The combined set.\n * @see {@link https://api.jquery.com/add/}\n */\n\n\nexports.add = function (other, context) {\n  var selection = this._make(other, context);\n\n  var contents = uniqueSort(this.get().concat(selection.get()));\n  return this._make(contents);\n};\n/**\n * Add the previous set of elements on the stack to the current set, optionally\n * filtered by a selector.\n *\n * @example\n *   $('li').eq(0).addBack('.orange').length;\n *   //=> 2\n *\n * @param {string} selector - Selector for the elements to add.\n * @returns {Cheerio} The combined set.\n * @see {@link https://api.jquery.com/addBack/}\n */\n\n\nexports.addBack = function (selector) {\n  return this.add(arguments.length ? this.prevObject.filter(selector) : this.prevObject);\n};","map":null,"metadata":{},"sourceType":"module"}