{"ast":null,"code":"'use strict';\n/*\n  Module Dependencies\n*/\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar DomUtils = require('htmlparser2').DomUtils;\n\nvar parseWithHtmlparser2 = require('./parsers/htmlparser2').parse;\n\nvar parseWithParse5 = require('./parsers/parse5').parse;\n\nvar Document = require('domhandler').Document;\n/*\n  Parser\n*/\n\n\nexports = module.exports = function parse(content, options, isDocument) {\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n    content = content.toString();\n  }\n\n  if (typeof content === 'string') {\n    return options.xmlMode || options._useHtmlParser2 ? parseWithHtmlparser2(content, options) : parseWithParse5(content, options, isDocument);\n  }\n\n  if (_typeof(content) === 'object' && content != null && content.type === 'root') {\n    // If `content` is already a root, just return it\n    return content;\n  } // Add conent to new root element\n\n\n  var root = new Document(content); // Update the DOM using the root\n\n  exports.update(content, root);\n  return root;\n};\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param {Node[] | Node} arr - The new children.\n * @param {NodeWithChildren} parent - The new parent.\n * @returns {Node} The parent node.\n */\n\n\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr]; // Update parent\n\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  } // Update neighbors\n\n\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i]; // Cleanly remove existing nodes from their previous structures.\n\n    if (node.parent && node.parent.children !== arr) {\n      DomUtils.removeElement(node);\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    node.parent = parent;\n  }\n\n  return parent;\n};","map":null,"metadata":{},"sourceType":"module"}