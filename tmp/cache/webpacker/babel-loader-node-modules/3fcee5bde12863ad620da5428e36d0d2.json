{"ast":null,"code":"'use strict';\n/**\n * @module cheerio/load\n * @ignore\n */\n\nvar defaultOptions = require('./options')[\"default\"];\n\nvar flattenOptions = require('./options').flatten;\n\nvar staticMethods = require('./static');\n\nvar Cheerio = require('./cheerio');\n\nvar parse = require('./parse');\n/**\n * Create a querying function, bound to a document created from the provided\n * markup. Note that similar to web browser contexts, this operation may\n * introduce `<html>`, `<head>`, and `<body>` elements; set `isDocument` to\n * `false` to switch to fragment mode and disable this.\n *\n * See the README section titled \"Loading\" for additional usage information.\n *\n * @param {string} content - Markup to be loaded.\n * @param {object} [options] - Options for the created instance.\n * @param {boolean} [isDocument] - Allows parser to be switched to fragment mode.\n * @returns {Cheerio} - The loaded document.\n */\n\n\nexports.load = function (content, options, isDocument) {\n  if (content === null || content === undefined) {\n    throw new Error('cheerio.load() expects a string');\n  }\n\n  options = Object.assign({}, defaultOptions, flattenOptions(options));\n  if (typeof isDocument === 'undefined') isDocument = true;\n  var root = parse(content, options, isDocument);\n\n  function initialize(selector, context, r, opts) {\n    if (!(this instanceof initialize)) {\n      return new initialize(selector, context, r, opts);\n    }\n\n    opts = Object.assign({}, options, opts);\n    return Cheerio.call(this, selector, context, r || root, opts);\n  } // Ensure that selections created by the \"loaded\" `initialize` function are\n  // true Cheerio instances.\n\n\n  initialize.prototype = Object.create(Cheerio.prototype);\n  initialize.prototype.constructor = initialize; // Mimic jQuery's prototype alias for plugin authors.\n\n  initialize.fn = initialize.prototype; // Keep a reference to the top-level scope so we can chain methods that implicitly\n  // resolve selectors; e.g. $(\"<span>\").(\".bar\"), which otherwise loses ._root\n\n  initialize.prototype._originalRoot = root; // Add in the static methods\n\n  Object.assign(initialize, staticMethods, exports); // Add in the root\n\n  initialize._root = root; // store options\n\n  initialize._options = options;\n  return initialize;\n};","map":null,"metadata":{},"sourceType":"module"}