{"ast":null,"code":"'use strict';\n\nvar htmlparser2 = require('htmlparser2');\n\nvar domhandler = require('domhandler');\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @param {Node} type - DOM node to check.\n * @returns {boolean}\n */\n\n\nexports.isTag = htmlparser2.DomUtils.isTag;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @param {string} str - String to be converted.\n * @returns {string} String in camel case notation.\n */\n\nexports.camelCase = function (str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n};\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @param {string} str - String to be converted.\n * @returns {string} String in \"CSS case\".\n */\n\n\nexports.cssCase = function (str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n};\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @param {Cheerio} cheerio - Cheerio object.\n * @param {Function} fn - Function to call.\n * @returns {Cheerio} The original instance.\n */\n\n\nexports.domEach = function (cheerio, fn) {\n  var i = 0;\n  var len = cheerio.length;\n\n  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) {\n    ++i;\n  }\n\n  return cheerio;\n};\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @param {Node | Node[]} dom - The htmlparser2-compliant DOM structure.\n * @returns {Node[]} - The cloned DOM.\n */\n\n\nexports.cloneDom = function (dom) {\n  var clone = 'length' in dom ? Array.prototype.map.call(dom, function (el) {\n    return domhandler.cloneNode(el, true);\n  }) : [domhandler.cloneNode(dom, true)]; // Add a root node around the cloned nodes\n\n  var root = new domhandler.Document(clone);\n  clone.forEach(function (node) {\n    node.parent = root;\n  });\n  return clone;\n};\n/**\n * A simple way to check for HTML strings. Tests for a `<` within a string,\n * immediate followed by a letter and eventually followed by a `>`.\n *\n * @private\n */\n\n\nvar quickExpr = /<[a-zA-Z][^]*>/;\n/**\n * Check if string is HTML.\n *\n * @private\n * @param {string} str - String to check.\n * @returns {boolean} Indicates if `str` is HTML.\n */\n\nexports.isHtml = function (str) {\n  // Run the regex\n  return quickExpr.test(str);\n};","map":null,"metadata":{},"sourceType":"module"}