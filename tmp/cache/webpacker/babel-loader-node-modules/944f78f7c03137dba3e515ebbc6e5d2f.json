{"ast":null,"code":"'use strict';\n/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar text = require('../static').text;\n\nvar utils = require('../utils');\n\nvar isTag = utils.isTag;\nvar domEach = utils.domEach;\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar camelCase = utils.camelCase;\nvar cssCase = utils.cssCase;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = 'data-'; // Lookup table for coercing string data-* attributes to their corresponding\n// JavaScript primitives\n\nvar primitives = {\n  \"null\": null,\n  \"true\": true,\n  \"false\": false\n}; // Attributes that are booleans\n\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i; // Matches strings that look like JSON objects or arrays\n\nvar rbrace = /^(?:{[\\w\\W]*}|\\[[\\w\\W]*])$/;\n/**\n * Gets a node's attribute. For boolean attributes, it will return the value's\n * name should it be set.\n *\n * Also supports getting the `value` of several form elements.\n *\n * @private\n * @param {Element} elem - Elenent to get the attribute of.\n * @param {string} name - Name of the attribute.\n * @returns {object | string | undefined} The attribute's value.\n */\n\nfunction getAttr(elem, name) {\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.attribs) {\n    elem.attribs = {};\n  } // Return the entire attribs object if no attribute specified\n\n\n  if (!name) {\n    return elem.attribs;\n  }\n\n  if (hasOwn.call(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return rboolean.test(name) ? name : elem.attribs[name];\n  } // Mimic the DOM and return text content as value for `option's`\n\n\n  if (elem.name === 'option' && name === 'value') {\n    return text(elem.children);\n  } // Mimic DOM with default value for radios/checkboxes\n\n\n  if (elem.name === 'input' && (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') && name === 'value') {\n    return 'on';\n  }\n}\n/**\n * Sets the value of an attribute. The attribute will be deleted if the value is `null`.\n *\n * @private\n * @param {Element} el - The element to set the attribute on.\n * @param {string} name - The attribute's name.\n * @param {string | null} value - The attribute's value.\n */\n\n\nfunction setAttr(el, name, value) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = value + '';\n  }\n}\n/**\n * Method for getting and setting attributes. Gets the attribute value for only\n * the first element in the matched set. If you set an attribute's value to\n * `null`, you remove that attribute. You may also pass a `map` and `function`\n * like jQuery.\n *\n * @example\n *   $('ul').attr('id');\n *   //=> fruits\n *\n *   $('.apple').attr('id', 'favorite').html();\n *   //=> <li class=\"apple\" id=\"favorite\">Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @param {string | Function} [value] - If specified sets the value of the attribute.\n * @returns {string | Cheerio} If `value` is specified the instance itself,\n *   otherwise the attribute's value.\n * @see {@link https://api.jquery.com/attr/}\n */\n\n\nexports.attr = function (name, value) {\n  // Set the value (with attr map support)\n  if (_typeof(name) === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (i, el) {\n        setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n\n    return domEach(this, function (i, el) {\n      if (!isTag(el)) return;\n\n      if (_typeof(name) === 'object') {\n        Object.keys(name).forEach(function (objName) {\n          var objValue = name[objName];\n          setAttr(el, objName, objValue);\n        });\n      } else {\n        setAttr(el, name, value);\n      }\n    });\n  }\n\n  return arguments.length > 1 ? this : getAttr(this[0], name);\n};\n/**\n * Gets a node's prop.\n *\n * @private\n * @param {Node} el - Elenent to get the prop of.\n * @param {string} name - Name of the prop.\n * @returns {string | undefined} The prop's value.\n */\n\n\nfunction getProp(el, name) {\n  if (!el || !isTag(el)) return;\n  return name in el ? el[name] : rboolean.test(name) ? getAttr(el, name) !== undefined : getAttr(el, name);\n}\n/**\n * Sets the value of a prop.\n *\n * @private\n * @param {Element} el - The element to set the prop on.\n * @param {string} name - The prop's name.\n * @param {string | null} value - The prop's value.\n */\n\n\nfunction setProp(el, name, value) {\n  if (name in el) {\n    el[name] = value;\n  } else {\n    setAttr(el, name, rboolean.test(name) ? value ? '' : null : value);\n  }\n}\n/**\n * Method for getting and setting properties. Gets the property value for only\n * the first element in the matched set.\n *\n * @example\n *   $('input[type=\"checkbox\"]').prop('checked');\n *   //=> false\n *\n *   $('input[type=\"checkbox\"]').prop('checked', true).val();\n *   //=> ok\n *\n * @param {string} name - Name of the property.\n * @param {any} [value] - If specified set the property to this.\n * @returns {string | Cheerio} If `value` is specified the instance itself,\n *   otherwise the prop's value.\n * @see {@link https://api.jquery.com/prop/}\n */\n\n\nexports.prop = function (name, value) {\n  if (typeof name === 'string' && value === undefined) {\n    switch (name) {\n      case 'style':\n        {\n          var property = this.css();\n          var keys = Object.keys(property);\n          keys.forEach(function (p, i) {\n            property[i] = p;\n          });\n          property.length = keys.length;\n          return property;\n        }\n\n      case 'tagName':\n      case 'nodeName':\n        return this[0].name.toUpperCase();\n\n      case 'outerHTML':\n        return this.clone().wrap('<container />').parent().html();\n\n      case 'innerHTML':\n        return this.html();\n\n      default:\n        return getProp(this[0], name);\n    }\n  }\n\n  if (_typeof(name) === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (j, el) {\n        setProp(el, name, value.call(el, j, getProp(el, name)));\n      });\n    }\n\n    return domEach(this, function (__, el) {\n      if (!isTag(el)) return;\n\n      if (_typeof(name) === 'object') {\n        Object.keys(name).forEach(function (key) {\n          var val = name[key];\n          setProp(el, key, val);\n        });\n      } else {\n        setProp(el, name, value);\n      }\n    });\n  }\n};\n/**\n * Sets the value of a data attribute.\n *\n * @private\n * @param {Element} el - The element to set the data attribute on.\n * @param {string | object} name - The data attribute's name.\n * @param {string | null} value - The data attribute's value.\n */\n\n\nfunction setData(el, name, value) {\n  if (!el.data) {\n    el.data = {};\n  }\n\n  if (_typeof(name) === 'object') Object.assign(el.data, name);else if (typeof name === 'string' && value !== undefined) {\n    el.data[name] = value;\n  }\n}\n/**\n * Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n * and (if present) cache the value in the node's internal data store. If no\n * attribute name is specified, read *all* HTML5 `data-*` attributes in this manner.\n *\n * @private\n * @param {Element} el - Elenent to get the data attribute of.\n * @param {string} [name] - Name of the data attribute.\n * @returns {any} The data attribute's value, or a map with all of the data attribute.\n */\n\n\nfunction readData(el, name) {\n  var readAll = arguments.length === 1;\n  var domNames;\n  var jsNames;\n  var value;\n\n  if (readAll) {\n    domNames = Object.keys(el.attribs).filter(function (attrName) {\n      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;\n    });\n    jsNames = domNames.map(function (_domName) {\n      return camelCase(_domName.slice(dataAttrPrefix.length));\n    });\n  } else {\n    domNames = [dataAttrPrefix + cssCase(name)];\n    jsNames = [name];\n  }\n\n  for (var idx = 0; idx < domNames.length; ++idx) {\n    var domName = domNames[idx];\n    var jsName = jsNames[idx];\n\n    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {\n      value = el.attribs[domName];\n\n      if (hasOwn.call(primitives, value)) {\n        value = primitives[value];\n      } else if (value === String(Number(value))) {\n        value = Number(value);\n      } else if (rbrace.test(value)) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n\n      el.data[jsName] = value;\n    }\n  }\n\n  return readAll ? el.data : value;\n}\n/**\n * Method for getting and setting data attributes. Gets or sets the data\n * attribute value for only the first element in the matched set.\n *\n * @example\n *   $('<div data-apple-color=\"red\"></div>').data();\n *   //=> { appleColor: 'red' }\n *\n *   $('<div data-apple-color=\"red\"></div>').data('apple-color');\n *   //=> 'red'\n *\n *   const apple = $('.apple').data('kind', 'mac');\n *   apple.data('kind');\n *   //=> 'mac'\n *\n * @param {string} name - Name of the attribute.\n * @param {any} [value] - If specified new value.\n * @returns {string | Cheerio | undefined} If `value` is specified the instance\n *   itself, otherwise the data attribute's value.\n * @see {@link https://api.jquery.com/data/}\n */\n\n\nexports.data = function (name, value) {\n  var elem = this[0];\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.data) {\n    elem.data = {};\n  } // Return the entire data object if no data specified\n\n\n  if (!name) {\n    return readData(elem);\n  } // Set the value (with attr map support)\n\n\n  if (_typeof(name) === 'object' || value !== undefined) {\n    domEach(this, function (i, el) {\n      setData(el, name, value);\n    });\n    return this;\n  }\n\n  if (hasOwn.call(elem.data, name)) {\n    return elem.data[name];\n  }\n\n  return readData(elem, name);\n};\n/**\n * Method for getting and setting the value of input, select, and textarea.\n * Note: Support for `map`, and `function` has not been added yet.\n *\n * @example\n *   $('input[type=\"text\"]').val();\n *   //=> input_text\n *\n *   $('input[type=\"text\"]').val('test').html();\n *   //=> <input type=\"text\" value=\"test\"/>\n *\n * @param {string | string[]} [value] - If specified new value.\n * @returns {string | Cheerio | undefined} If a new `value` is specified the\n *   instance itself, otherwise the value.\n * @see {@link https://api.jquery.com/val/}\n */\n\n\nexports.val = function (value) {\n  var querying = arguments.length === 0;\n  var element = this[0];\n  if (!element) return;\n\n  switch (element.name) {\n    case 'textarea':\n      return this.text(value);\n\n    case 'select':\n      {\n        var option = this.find('option:selected');\n        if (!option) return;\n\n        if (!querying) {\n          if (this.attr('multiple') == null && _typeof(value) === 'object') {\n            return this;\n          }\n\n          if (_typeof(value) !== 'object') {\n            value = [value];\n          }\n\n          this.find('option').removeAttr('selected');\n\n          for (var i = 0; i < value.length; i++) {\n            this.find('option[value=\"' + value[i] + '\"]').attr('selected', '');\n          }\n\n          return this;\n        }\n\n        return this.attr('multiple') ? option.toArray().map(function (el) {\n          return getAttr(el, 'value');\n        }) : option.attr('value');\n      }\n\n    case 'input':\n    case 'option':\n      return querying ? this.attr('value') : this.attr('value', value);\n  }\n};\n/**\n * Remove an attribute.\n *\n * @private\n * @param {Element} elem - Node to remove attribute from.\n * @param {string} name - Name of the attribute to remove.\n */\n\n\nfunction removeAttribute(elem, name) {\n  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;\n  delete elem.attribs[name];\n}\n/**\n * Splits a space-separated list of names to individual names.\n *\n * @param {string} names - Names to split.\n * @returns {string[]} - Split names.\n */\n\n\nfunction splitNames(names) {\n  return names ? names.trim().split(rspace) : [];\n}\n/**\n * Method for removing attributes by `name`.\n *\n * @example\n *   $('.pear').removeAttr('class').html();\n *   //=> <li>Pear</li>\n *\n *   $('.apple').attr('id', 'favorite');\n *   $('.apple').removeAttr('id class').html();\n *   //=> <li>Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/removeAttr/}\n */\n\n\nexports.removeAttr = function (name) {\n  var attrNames = splitNames(name);\n\n  for (var i = 0; i < attrNames.length; i++) {\n    domEach(this, function (_, elem) {\n      removeAttribute(elem, attrNames[i]);\n    });\n  }\n\n  return this;\n};\n/**\n * Check to see if *any* of the matched elements have the given `className`.\n *\n * @example\n *   $('.pear').hasClass('pear');\n *   //=> true\n *\n *   $('apple').hasClass('fruit');\n *   //=> false\n *\n *   $('li').hasClass('pear');\n *   //=> true\n *\n * @param {string} className - Name of the class.\n * @returns {boolean} Indicates if an element has the given `className`.\n * @see {@link https://api.jquery.com/hasClass/}\n */\n\n\nexports.hasClass = function (className) {\n  return this.toArray().some(function (elem) {\n    var clazz = elem.attribs && elem.attribs['class'];\n    var idx = -1;\n\n    if (clazz && className.length) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        var end = idx + className.length;\n\n        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end === clazz.length || rspace.test(clazz[end]))) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  });\n};\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function` like jQuery.\n *\n * @example\n *   $('.pear').addClass('fruit').html();\n *   //=> <li class=\"pear fruit\">Pear</li>\n *\n *   $('.apple').addClass('fruit red').html();\n *   //=> <li class=\"apple fruit red\">Apple</li>\n *\n * @param {string | Function} value - Name of new class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/addClass/}\n */\n\n\nexports.addClass = function (value) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      var className = el.attribs['class'] || '';\n      exports.addClass.call([el], value.call(el, i, className));\n    });\n  } // Return if no value or not a string or function\n\n\n  if (!value || typeof value !== 'string') return this;\n  var classNames = value.split(rspace);\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue; // If we don't already have classes\n\n    var className = getAttr(this[i], 'class');\n\n    if (!className) {\n      setAttr(this[i], 'class', classNames.join(' ').trim());\n    } else {\n      var setClass = ' ' + className + ' '; // Check if class already exists\n\n      for (var j = 0; j < classNames.length; j++) {\n        var appendClass = classNames[j] + ' ';\n        if (setClass.indexOf(' ' + appendClass) < 0) setClass += appendClass;\n      }\n\n      setAttr(this[i], 'class', setClass.trim());\n    }\n  }\n\n  return this;\n};\n/**\n * Removes one or more space-separated classes from the selected elements. If no\n * `className` is defined, all classes will be removed. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *   $('.pear').removeClass('pear').html();\n *   //=> <li class=\"\">Pear</li>\n *\n *   $('.apple').addClass('red').removeClass().html();\n *   //=> <li class=\"\">Apple</li>\n *\n * @param {string | Function} value - Name of the class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/removeClass/}\n */\n\n\nexports.removeClass = function (value) {\n  // Handle if value is a function\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.removeClass.call([el], value.call(el, i, el.attribs['class'] || ''));\n    });\n  }\n\n  var classes = splitNames(value);\n  var numClasses = classes.length;\n  var removeAll = arguments.length === 0;\n  return domEach(this, function (_, el) {\n    if (!isTag(el)) return;\n\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs[\"class\"] = '';\n    } else {\n      var elClasses = splitNames(el.attribs[\"class\"]);\n      var changed = false;\n\n      for (var j = 0; j < numClasses; j++) {\n        var index = elClasses.indexOf(classes[j]);\n\n        if (index >= 0) {\n          elClasses.splice(index, 1);\n          changed = true; // We have to do another pass to ensure that there are not duplicate\n          // classes listed\n\n          j--;\n        }\n      }\n\n      if (changed) {\n        el.attribs[\"class\"] = elClasses.join(' ');\n      }\n    }\n  });\n};\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *   $('.apple.green').toggleClass('fruit green red').html();\n *   //=> <li class=\"apple fruit red\">Apple</li>\n *\n *   $('.apple.green').toggleClass('fruit green red', true).html();\n *   //=> <li class=\"apple green fruit red\">Apple</li>\n *\n * @param {string | Function} value - Name of the class. Can also be a function.\n * @param {boolean} [stateVal] - If specified the state of the class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/toggleClass/}\n */\n\n\nexports.toggleClass = function (value, stateVal) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.toggleClass.call([el], value.call(el, i, el.attribs['class'] || '', stateVal), stateVal);\n    });\n  } // Return if no value or not a string or function\n\n\n  if (!value || typeof value !== 'string') return this;\n  var classNames = value.split(rspace);\n  var numClasses = classNames.length;\n  var state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0;\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n    var elementClasses = splitNames(this[i].attribs[\"class\"]); // Check if class already exists\n\n    for (var j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      var index = elementClasses.indexOf(classNames[j]); // Add if stateValue === true or we are toggling and there is no value\n\n      if (state >= 0 && index < 0) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index >= 0) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n\n    this[i].attribs[\"class\"] = elementClasses.join(' ');\n  }\n\n  return this;\n};\n/**\n * Checks the current list of elements and returns `true` if _any_ of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if _any_ of the elements match. If using a predicate function,\n * the function is executed in the context of the selected element, so `this`\n * refers to the current element.\n *\n * @param {string | Function | Cheerio | Node} selector - Selector for the selection.\n * @returns {boolean} Whether or not the selector matches an element of the instance.\n * @see {@link https://api.jquery.com/is/}\n */\n\n\nexports.is = function (selector) {\n  if (selector) {\n    return this.filter(selector).length > 0;\n  }\n\n  return false;\n};","map":null,"metadata":{},"sourceType":"module"}